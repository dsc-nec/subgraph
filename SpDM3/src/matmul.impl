// #include "../include/matmul.h"
#include "../include/dmat.h"
#include <vector>

#ifdef	USE_BLAS
#include "../../SpBLAS/blas_sparse.h"
#endif  // USE_BLAS

#ifdef	USE_MKL
#include "mkl.h"
#endif  // USE_MKL

namespace spdm3 {

//
// Dense - Dense.
//
template <class IT, class VT>
void matmul_naive(const DMat<IT, VT> &A,
                  const DMat<IT, VT> &B, DMat<IT, VT> &C) {
  if (A.cols_ != B.rows_) {
    printf("matmul_naive: ERROR! Dimensions mismatch (%d != %d)\n",
        A.cols_, B.rows_);
    exit(1);
  }

  if (!C.IsAllocated() ||
      C.rows_ != A.rows_ || C.cols_ != B.cols_) {
    C.Allocate(A.rows_, B.cols_);
    C.Fill(0.0);
  }

  // Assumes C is the same format as A for now.
  assert(C.format_ == A.format_);
  if (A.format_ == DENSE_ROWMAJOR) {
    if (B.format_ == DENSE_ROWMAJOR) {
      for (int i = 0; i < A.rows_; ++i) {
        for (int j = 0; j < B.cols_; ++j) {
          for (int k = 0; k < A.cols_; ++k) {
            C.values_[i * C.lda_ + j] +=
                A.values_[i * A.lda_ + k] * B.values_[k * B.lda_ + j];
          }
        }
      }
    } else {
      for (int i = 0; i < A.rows_; ++i) {
        for (int j = 0; j < B.cols_; ++j) {
          for (int k = 0; k < A.cols_; ++k) {
            C.values_[i * C.lda_ + j] +=
                A.values_[i * A.lda_ + k] * B.values_[k + B.lda_ * j];
          }
        }
      }
    }
  } else {
    if (B.format_ == DENSE_COLMAJOR) {
      for (int i = 0; i < A.rows_; ++i) {
        for (int j = 0; j < B.cols_; ++j) {
          for (int k = 0; k < A.cols_; ++k) {
            C.values_[i + C.lda_ * j] +=
                A.values_[i + A.lda_ * k] * B.values_[k + B.lda_ * j];
          }
        }
      }
    } else {
      for (int i = 0; i < A.rows_; ++i) {
        for (int j = 0; j < B.cols_; ++j) {
          for (int k = 0; k < A.cols_; ++k) {
            C.values_[i + C.lda_ * j] +=
                A.values_[i + A.lda_ * k] * B.values_[k * B.lda_ + j];
          }
        }
      }
    }
  }
}

#define VT double
template <class IT>
void matmul_blas(const DMat<IT, VT> &A,
                 const DMat<IT, VT> &B, DMat<IT, VT> &C) {
#ifdef USE_BLAS
  if (!C.IsAllocated() ||
      C.rows_ != A.rows_ || C.cols_ != B.cols_) {
    C.Allocate(A.rows_, B.cols_);
    C.Fill(0.0);
  }
  // Note: dgemm_ is column_major
  char transa, transb;
  VT alpha = 1.0, beta = 1.0;

  // Converts from const pointers to normal pointers.
  IT Arows = A.rows_, Acols = A.cols_, Bcols = B.cols_;
  IT lda = A.lda_, ldb = B.lda_;

  // Note: dgemm_ is column major.
  // Since A_rowmajor = A_colmajor^T, we compute,
  // (B_colmajor^T)(A_colmajor^T) = (C_colmajor^T).
  if (C.format_ == DENSE_ROWMAJOR) {
    transa = (A.format_ == DENSE_ROWMAJOR)? 'N':'T';
    transb = (B.format_ == DENSE_ROWMAJOR)? 'N':'T';
    dgemm_(&transb, &transa, &Bcols, &Arows, &Acols, &alpha,
           B.values_, &ldb, A.values_, &lda, &beta, C.values_, &(C.lda_));
  } else {
    transa = (A.format_ == DENSE_COLMAJOR)? 'N':'T';
    transb = (B.format_ == DENSE_COLMAJOR)? 'N':'T';
    dgemm_(&transa, &transb, &Arows, &Bcols, &Acols, &alpha,
           A.values_, &lda, B.values_, &ldb, &beta, C.values_, &(C.lda_));
  }
#endif  // USE_BLAS
}
#undef VT

#define VT float
template <class IT>
void matmul_blas(const DMat<IT, VT> &A,
                 const DMat<IT, VT> &B, DMat<IT, VT> &C) {
#ifdef USE_BLAS
  if (!C.IsAllocated() ||
      C.rows_ != A.rows_ || C.cols_ != B.cols_) {
    C.Allocate(A.rows_, B.cols_);
    C.Fill(0.0);
  }

  // Note: dgemm_ is column_major
  char transa, transb;
  VT alpha = 1.0, beta = 1.0;

  // Converts from const pointers to normal pointers.
  IT Arows = A.rows_, Acols = A.cols_, Bcols = B.cols_;
  IT lda = A.lda_, ldb = B.lda_;

  // Note: dgemm_ is column major.
  // Since A_rowmajor = A_colmajor^T, we compute,
  // (B_colmajor^T)(A_colmajor^T) = (C_colmajor^T).
  if (C.format_ == DENSE_ROWMAJOR) {
    transa = (A.format_ == DENSE_ROWMAJOR)? 'N':'T';
    transb = (B.format_ == DENSE_ROWMAJOR)? 'N':'T';
    sgemm_(&transb, &transa, &Bcols, &Arows, &Acols, &alpha,
           B.values_, &ldb, A.values_, &lda, &beta, C.values_, &(C.lda_));
  } else {
    transa = (A.format_ == DENSE_COLMAJOR)? 'N':'T';
    transb = (B.format_ == DENSE_COLMAJOR)? 'N':'T';
    sgemm_(&transa, &transb, &Arows, &Bcols, &Acols, &alpha,
           A.values_, &lda, B.values_, &ldb, &beta, C.values_, &(C.lda_));
  }
#endif  // USE_BLAS
}
#undef VT

#define VT double
template <class IT>
void matmul_mkl(const DMat<IT, VT> &A,
                const DMat<IT, VT> &B, DMat<IT, VT> &C) {
#ifdef USE_MKL
  if (!C.IsAllocated() ||
      C.rows_ != A.rows_ || C.cols_ != B.cols_) {
    C.Allocate(A.rows_, B.cols_);
    C.Fill(0.0);
  }

  VT alpha = 1.0;
  VT beta = 1.0;

  // Assumes C has same format as A.
  assert(C.format_ == A.format_);
  CBLAS_LAYOUT layout = (A.format_ == DENSE_ROWMAJOR)?
                            CblasRowMajor : CblasColMajor;
  CBLAS_TRANSPOSE transa = (A.format_ == DENSE_ROWMAJOR)?
                               CblasNoTrans : CblasTrans;
  CBLAS_TRANSPOSE transb = (B.format_ == DENSE_ROWMAJOR)?
                               CblasNoTrans : CblasTrans;

  cblas_dgemm(layout, transa, transb,
              A.rows_, B.cols_, A.cols_, alpha, A.values_, A.lda_,
              B.values_, B.lda_, beta, C.values_, C.lda_);
#endif  // USE_MKL
}
#undef VT

#define VT float
template <class IT>
void matmul_mkl(const DMat<IT, VT> &A,
                const DMat<IT, VT> &B, DMat<IT, VT> &C) {
#ifdef USE_MKL
  if (!C.IsAllocated() ||
      C.rows_ != A.rows_ || C.cols_ != B.cols_) {
    C.Allocate(A.rows_, B.cols_);
    C.Fill(0.0);
  }

  VT alpha = 1.0;
  VT beta = 1.0;

  // Assumes C has same format as A.
  assert(C.format_ == A.format_);
  CBLAS_LAYOUT layout = (A.format_ == DENSE_ROWMAJOR)?
                            CblasRowMajor : CblasColMajor;
  CBLAS_TRANSPOSE transa = (A.format_ == DENSE_ROWMAJOR)?
                               CblasNoTrans : CblasTrans;
  CBLAS_TRANSPOSE transb = (B.format_ == DENSE_ROWMAJOR)?
                               CblasNoTrans : CblasTrans;

  cblas_sgemm(layout, transa, transb,
              A.rows_, B.cols_, A.cols_, alpha, A.values_, A.lda_,
              B.values_, B.lda_, beta, C.values_, C.lda_);
#endif  // USE_MKL
}
#undef VT

//
// Sparse - Dense.
// Check out this for our paper

template <class IT, class VT>
void matmul_naive(const SpMat<IT, VT> &A, const DMat<IT, VT> &B, DMat<IT, VT> &C) {
  // TODO(penpornk): write for CSC.
  if (!C.IsAllocated() ||
      C.rows_ != A.rows_ || C.cols_ != B.cols_) {
    C.Allocate(A.rows_, B.cols_);
    C.Fill(0.0);
  }
  for (int i = 0; i < A.rows_; ++i) {
    for (int j = 0; j < B.cols_; ++j) {
      for (int k = A.headptrs_[i] - A.idx_base_;
           k < A.headptrs_[i+1] - A.idx_base_; ++k) {
        C.values_[i * C.lda_ + j] += A.values_[k] *
            B.values_[(A.indices_[k] - A.idx_base_) * B.lda_ + j];
      }
    }
  }
}

#define VT double
template <class IT>
void matmul_blas(const SpMat<IT, VT> &A,
                 const DMat<IT, VT> &B, DMat<IT, VT> &C) {
#ifdef USE_BLAS

  VT alpha = 1.0;
  blas_sparse_matrix a;

  if (!C.IsAllocated() ||
      C.rows_ != A.rows_ || C.cols_ != B.cols_) {
    C.Allocate(A.rows_, B.cols_);
    C.Fill(0.0);
  }

  a = BLAS_duscr_begin(A.rows_, A.cols_);
  if (A.format_ == SPARSE_CSR) {
    for (int i = 0; i < A.dim1(); ++i) {
      for (int k = A.headptrs_[i];
           k < A.headptrs_[i+1]; ++k) {
        BLAS_duscr_insert_entry(a, A.values_[k], i, A.indices_[k]);
      }
    }
  } else if (A.format_ == SPARSE_CSC) {
    for (int j = 0; j < A.dim1(); ++j) {
      for (int k = A.headptrs_[j];
           k < A.headptrs_[j+1]; ++k) {
        BLAS_duscr_insert_entry(a, A.values_[k], A.indices_[k], j);
      }
    }
  }
  BLAS_duscr_end(a);

  BLAS_dusmm(blas_rowmajor, blas_no_trans,
             B.cols_, alpha, a, B.values_, B.lda_, C.values_, C.lda_);
  BLAS_usds(a);
#endif  // USE_BLAS
}
#undef VT

// --------------------------- Start check this for our paper (float type) ---------------------------

#define VT float
template <class IT>
void matmul_blas(const SpMat<IT, VT> &A,
                 const DMat<IT, VT> &B, DMat<IT, VT> &C) {
#ifdef USE_BLAS

  VT alpha = 1.0;
  blas_sparse_matrix a;

  if (!C.IsAllocated() ||
      C.rows_ != A.rows_ || C.cols_ != B.cols_) {
    C.Allocate(A.rows_, B.cols_);
    C.Fill(0.0);
  }

  a = BLAS_suscr_begin(A.rows_, A.cols_);

  if (A.format_ == SPARSE_CSR) {
    for (int i = 0; i < A.dim1(); ++i) {
      for (int k = A.headptrs_[i];
           k < A.headptrs_[i+1]; ++k) {
        BLAS_suscr_insert_entry(a, A.values_[k], i, A.indices_[k]);
      }
    }

  } else if (A.format_ == SPARSE_CSC) {
    for (int j = 0; j < A.dim1(); ++j) {
      for (int k = A.headptrs_[j];
           k < A.headptrs_[j+1]; ++k) {
        BLAS_suscr_insert_entry(a, A.values_[k], A.indices_[k], j);
      }
    }
  }

  BLAS_suscr_end(a);

  BLAS_susmm(blas_rowmajor, blas_no_trans,
           B.cols_, alpha, a, B.values_, B.lda_, C.values_, C.lda_);

  BLAS_usds(a);

#endif  // USE_BLAS
}
#undef VT

#define VT float
template <class IT>
void matmul_blas_colmajor(const SpMat<IT, VT> &A,
                 const DMat<IT, VT> &B, DMat<IT, VT> &C) {
#ifdef USE_BLAS

  VT alpha = 1.0;
  blas_sparse_matrix a;

  if (!C.IsAllocated() ||
      C.rows_ != A.rows_ || C.cols_ != B.cols_) {
    C.Allocate(A.rows_, B.cols_);
    C.Fill(0.0);
  }

  a = BLAS_suscr_begin(A.rows_, A.cols_);

  if (A.format_ == SPARSE_CSR) {
    for (int i = 0; i < A.dim1(); ++i) {
      for (int k = A.headptrs_[i];
           k < A.headptrs_[i+1]; ++k) {
        BLAS_suscr_insert_entry(a, A.values_[k], i, A.indices_[k]);
      }
    }

  } else if (A.format_ == SPARSE_CSC) {
    for (int j = 0; j < A.dim1(); ++j) {
      for (int k = A.headptrs_[j];
           k < A.headptrs_[j+1]; ++k) {
        BLAS_suscr_insert_entry(a, A.values_[k], A.indices_[k], j);
      }
    }
  }

  BLAS_suscr_end(a);

  // use column mojored operations
  BLAS_susmm(blas_colmajor, blas_no_trans,
             B.cols_, alpha, a, B.values_, B.lda_, C.values_, C.lda_);

  BLAS_usds(a);

#endif  // USE_BLAS
}
#undef VT

// --------------------------- End check this for our paper (float type) ---------------------------

#define VT double
template <class IT>
void matmul_mkl(const SpMat<IT, VT> &A,
                const DMat<IT, VT> &B, DMat<IT, VT> &C) {
#ifdef USE_MKL
  if (!C.IsAllocated() ||
      C.rows_ != A.rows_ || C.cols_ != B.cols_) {
    C.Allocate(A.rows_, B.cols_);
    C.Fill(0.0);
  }

  char transa = 'N';
  char matdescra[6] = "GXXC";
  VT alpha = 1.0;
  VT beta = 1.0;

  // Only supports dense rowmajor for now.
  if (A.format_ == SPARSE_CSR) {
    mkl_dcsrmm(&transa, &A.rows_, &B.cols_, &A.cols_, &alpha, matdescra,
               A.values_, A.indices_, A.headptrs_, A.headptrs_+1, B.values_, &B.lda_,
               &beta, C.values_, &C.lda_);
  } else if (A.format_ == SPARSE_CSC) {
    mkl_dcscmm(&transa, &A.rows_, &B.cols_, &A.cols_, &alpha, matdescra,
               A.values_, A.indices_, A.headptrs_, A.headptrs_+1, B.values_, &B.lda_,
               &beta, C.values_, &C.lda_);
  }
#endif  // USE_MKL
}
#undef VT

// check this for our paper (float version)
#define VT float
template <class IT>
void matmul_mkl(const SpMat<IT, VT> &A,
                const DMat<IT, VT> &B, DMat<IT, VT> &C) {
#ifdef USE_MKL
  if (!C.IsAllocated() ||
      C.rows_ != A.rows_ || C.cols_ != B.cols_) {
    C.Allocate(A.rows_, B.cols_);
    C.Fill(0.0);
  }

  char transa = 'N';
  char matdescra[6] = "GXXC";
  VT alpha = 1.0;
  VT beta = 1.0;

  // Only supports dense rowmajor for now.
  if (A.format_ == SPARSE_CSR) {
    mkl_scsrmm(&transa, &A.rows_, &B.cols_, &A.cols_, &alpha, matdescra,
               A.values_, A.indices_, A.headptrs_, A.headptrs_+1, B.values_, &B.lda_,
               &beta, C.values_, &C.lda_);
  } else if (A.format_ == SPARSE_CSC) {
    mkl_scscmm(&transa, &A.rows_, &B.cols_, &A.cols_, &alpha, matdescra,
               A.values_, A.indices_, A.headptrs_, A.headptrs_+1, B.values_, &B.lda_,
               &beta, C.values_, &C.lda_);
  }
#endif  // USE_MKL
}
#undef VT

//
// Sparse - Sparse.
//
template <class IT, class VT>
void matmul_naive(const SpMat<IT, VT> &A, const SpMat<IT, VT> &B, SpMat<IT, VT> &C) {
  // Does b_i rows at a time
  IT bi = 4;
  IT *cur = new IT[bi];
  IT *end = new IT[bi];
  VT *buf = new VT[bi * B.cols_];
  VT *cache = new VT[bi];

  C.nnz_ = 0;
  C.AllocateHeads(A.rows_, B.cols_);
  std::vector<IT> indices;
  std::vector<VT> values;
  for (int ii = 0; ii < A.rows_; ii += bi) {
    // Sets the beginning and end of the interested rows.
    for (int i = 0; i < bi && ii + i < A.rows_; ++i) {
      cur[i] = A.headptrs_[ii+i];
      end[i] = A.headptrs_[ii+i+1];
    }
    // Resets buffer.
    for (int i = 0; i < bi * B.cols_; ++i)
      buf[i] = 0.0;

    // Multiplies.
    for (int k = 0; k < A.cols_; ++k) {
      for (int i = 0; i < bi && ii + i < A.rows_; ++i) {
        if (A.indices_[cur[i]] == k && cur[i] < end[i]) {
          cache[i] = A.values_[cur[i]];
          ++cur[i];
        } else {
          cache[i] = 0.0;
        }
      }
      for (int l = B.headptrs_[k]; l < B.headptrs_[k+1]; ++l) {
        int j = B.indices_[l];
        for (int i = 0; i < bi && ii + i < A.rows_; ++i) {
          if (cache[i] != 0) {
            buf[i * B.cols_ + j] += cache[i] * B.values_[l];
          }
        }
      }
    }
    // Stores in sparse format.
    for (int i = 0; i < bi && ii + i < A.rows_; ++i) {
      C.headptrs_[ii + i] = C.nnz_;
      for (int j = 0; j < B.cols_; ++j) {
        if (buf[i * B.cols_ + j] != 0) {
          indices.push_back(j);
          values.push_back(buf[i * B.cols_ + j]);
          ++C.nnz_;
        }
      }
    }
  }
  C.headptrs_[C.rows_] = C.nnz_;

  // Copies back from vectors.
  C.AllocateBuffers(C.nnz_);
  for (int k = 0; k < C.nnz_; ++k) {
    C.indices_[k] = indices[k];
    C.values_[k]  = values[k];
  }
  indices.clear();
  values.clear();

  delete [] cur;
  delete [] end;
  delete [] buf;
}

#define VT double
template <class IT>
void matmul_mkl(const SpMat<IT, VT> &A,
                const SpMat<IT, VT> &B, SpMat<IT, VT> &C) {
#ifdef USE_MKL
  C.AllocateHeads(A.rows_, B.cols_);

  // MKL only supports 1-based indexing.
  SpMat<IT, VT> A1, B1;
  IT *Aheads, *Aindices, *Bheads, *Bindices;
  if (A.idx_base_ == 0) {
    A.Create1BasedArrays(Aheads, Aindices);
  } else {
    Aheads = A.headptrs_;
    Aindices = A.indices_;
  }
  if (B.idx_base_ == 0) {
    B.Create1BasedArrays(Bheads, Bindices);
  } else {
    Bheads = B.headptrs_;
    Bindices = B.indices_;
  }

  IT C_old_base = C.idx_base_;
  C.idx_base_ = 1;

  char transa = 'N';
  VT alpha = 1.0;
  VT beta = 1.0;
  MKL_INT request = 0;
  MKL_INT sort = 0; // Sorts C but doesn't touch A and B.
  MKL_INT nzmax = 0, info;

  // Only supports CSR x CSR for now
  if (A.format_ == SPARSE_CSR && B.format_ == SPARSE_CSR) {
    // Counts the nnz first.
    request = 1;
    mkl_dcsrmultcsr(&transa, &request, &sort, &A.rows_, &A.cols_, &B.cols_,
                    A.values_, Aindices, Aheads,
                    B.values_, Bindices, Bheads,
                    NULL, NULL, C.headptrs_, &nzmax, &info);

    C.nnz_ = C.headptrs_[C.rows_]-1;
    C.AllocateBuffers(C.nnz_);
    request = 2;
    mkl_dcsrmultcsr(&transa, &request, &sort, &A.rows_, &A.cols_, &B.cols_,
                    A.values_, Aindices, Aheads,
                    B.values_, Bindices, Bheads,
                    C.values_, C.indices_, C.headptrs_, &C.nnz_, &info);
  } else {
    printf("Format not supported.\n");
    exit(1);
  }
  C.ChangeBase(C_old_base);

  if (A.idx_base_ == 0) {
    delete [] Aheads;
    delete [] Aindices;
  }
  if (B.idx_base_ == 0) {
    delete [] Bheads;
    delete [] Bindices;
  }
#endif  // USE_MKL
}
#undef VT

}  // namespace spdm3
